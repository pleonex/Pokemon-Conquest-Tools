<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAoGBgACBgwADgwKAA5MSkAMDBIAD84MAAoKMgAUUtGAFhYSABmXFwA+GAoAG9lZQA4YJAAiHBoAHR0
        awBYeLAA0JBAAJWJhQDEkGgAkIuLAMSQaQDFkmoAxpNrAMeVbgDIlm4AlZGRALyWcwCdk5AAyplyAM2c
        dgDOnXcA0KB7AMyhggDRon0AzaOFANOlfwB4mNAAz6aIANWogwDWqYUA0KiMANGrjwD4wEAAq6moANmu
        igDTrpQA1bCXAN2yjwDVsZcAy7SWANazmgCzsa4A1rScAOC3lQDat5kA17aeANi2ngDYt58A2bihANm5
        ogDZuqMA47yaANq6pAC5uLcAu7m2ANq8pgDbvKYA272nANy+qQDnwJ8AmLjYANy/qgDdv6sA3sKtAN7C
        rgDewq8A6sWkAN7DrwDfw7AA38SwAN/EsQDCwsIAxMPDAODFswDExMQA4Ma0AO3JqgDhx7UA4ci2AO7L
        qwDhybcA4sm3AOLJuADjyrkA48u6APDOrgDkysEAy8rKAOPMvADkzLwA8tCxAOXOvgDNzc0A89KzAOXQ
        wQDn0cIA9dS2AOfSwwD21bcA59PFAOjUxQDo1ccA6NXIAPjYuwDp1soA6tfKAOrYzAD6274A+ty/AOva
        zgD83sEA7NzQAOzc0QDt3dIA7d7UAO7f1ADu4NYA7uHXAO/i2ABg6PgA9/PwAPz8/AAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBgYGBBgYqKgICAgACAgAAAAAAAAAQEAAA
        AAICAgIAAgICgYEGKioCAAICAAICCAgCAAA2RT01LywnIx8dHBgWFBIagQYqAgAAAgIACAgICAgCAFlw
        bmtoZWJdW1dTUE9LShKBBioAAAAACAgCCAgICAgIZHSDPoODg4ODg4ODIINOFYEGKgAAAAICCAgCCAgI
        CAhqeU1IQzw5NDAtKSglIlMXgQYqAAAAAgICCAgCCAACCHF8g4NKg0KDOIMug4ODWByBBioAAAACAgIC
        CAgABgYEdn5eXFVQSUdBOzcycoNeHoEGKgAAAAICAgICCAABRiR4gINjg1qDToNEgzqDgmUhgQYqAAAA
        AgICAgICAAgAgXiAgIB/fn17end0c29taSaBBioAAAACAgACAgIACAgBYHhAM3VxbGdfVkxFPTUvMYEG
        KgoAAgICAAICAgIACAgBAVETBQIACAgNDQ0IAiqBgQYqKgACAgAAAgICAgIACAgAYVQJAgIADQ0NCAIq
        KoGBBgYqAAIAAAAAAgICAgIACAgLZlI/KxkbEQ4HAyoGgYEGBioKAgAAAAACAgICAgAICAgAAAACAAAN
        AggCKgaBgQYGKioCEAAAAAICAgICAAgICAAAAAIAAAIICAIqBoGBBAQEBAQEBAQEBAQEBAQEBAQEBAQE
        BAQEBAQEBAQEgYEGBgEMAAAAAAAAAQEABCQkJCQPDyQkJCQMBAEMDAGBgQYGAQwAAAAAAAAAAQAMJCQP
        JCQkJA8kJA8MBAEkDIGBBgECDAAAAAAAAAAAAA8PDAwMJCQPDAwPDw8MASQMgYEGAQIMAAAAAAAAAAAB
        DyQkDw8kRg8kJCQPDw8EDA+BgQEBBAwAAAAAAAAAAAQPJEZGJA9GRkZGRg8PDwQEJIGBAQIEDwAAAAAA
        AAAADCRGRkYPDyRGRkZGJA8MBAQMgYEBBAQPAAAAAAAAAAQPJEZGRg8PJEZGRkZGDwwBAQSBgQIEDwwA
        AAAAAQEBBA9GRkZGJA8kRkZGRkYkDwEBAYGBBAQkAQABBAwMDAQMJEZGRkYkDyRGRkZGRiQPAQEBgYEE
        BCQADAwMBgYGAQwkRg8PDw8PJEYkJA8kJAwBAQGBgQQEJAQGBgYGBgEBDAwNAQAEDCQPDAQEAQQNBAEB
        AYGBBCQEBgYGBgYBBAEMDwEBJEZGRkZGDwEEDwwBAQEBgYEEJAQGBgYGBAYEAQQBBCRGRkZGRkZGJAQB
        AQEBAQGBgQQkBAYGBgYGBgEBAQQPJCQkJCRGRkYkDAEBAQEBBoGBgYGBgYGBgYGBgYGBgYGBgYGBgYGB
        gYGBgYGBgYGBgQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>